'''
Voc√™ trabalha em uma escola e est√° ajudando a organizar uma olimp√≠ada interna de racioc√≠nio l√≥gico entre os alunos. Ganhar√° o torneio o aluno que conseguir responder o maior n√∫mero de quest√µes. Ao final da prova, voc√™ como respons√°vel, recebe arquivo ‚Äúnotas.csv‚Äù com duas colunas: (Coluna_1: NOME, Coluna_2: QUEST√ïES). O problema √© que s√£o muitos alunos e voc√™ deseja saber rapidamente quem ganhou, mas n√£o tem tempo para procurar nome por nome no arquivo. Um estagi√°rio, para te ajudar, desenvolveu um fun√ß√£o em Python que retorna o nome do aluno com maior nota e sua respectiva pontua√ß√£o. Para realizar um teste ao inv√©s do arquivo ‚Äúnotas.csv‚Äù ele passa o seguinte dicion√°rio para a fun√ß√£o:
'''
dicionario_de_valores = {'Alice': 8, 'Bob': 35,
                         'Charlie': 20, 'Pedro': 8, 'David': 35}


def encontrar_maior(dicionario):
    if not dicionario:
        return None, None

    # Inicializa a vari√°vel com o primeiro item do dicion√°rio
    nome_maior_n, maior_n = next(iter(dicionario.items()))

    # Itera sobre todos os itens do dicion√°rio
    for nome, numero in dicionario.items():
        # Atualiza se encontrar um n√∫mero maior
        if numero > maior_n:
            maior_n = numero
            nome_maior_n = nome
    print(nome_maior_n, maior_n)
    return nome_maior_n, maior_n


encontrar_maior(dicionario_de_valores)
"resp: BOB: 35"

'''
O estacionamento de uma universidade utiliza uma estrutura de dados do tipo pilha para organizar as informa√ß√µes dos carros. Ao analisar a implementa√ß√£o da classe ‚ÄúPilhaEstacionamento‚Äù em Python, foi identificado um erro relacionado √† l√≥gica da estrutura de dados. Considere a seguinte implementa√ß√£o:

1 - A fun√ß√£o sair_estacionamento est√° implementada incorretamente, pois remove o primeiro carro adicionado √† pilha em vez do √∫ltimo. 
2 - O c√≥digo n√£o compila devido a um erro na l√≥gica da estrutura de dados. 
3 - O c√≥digo est√° correto e implementa uma estrutura de dados do tipo pilha para o estacionamento de carros. 
4 - A fun√ß√£o entrar_estacionamento deveria receber como par√¢metro um objeto Carro, mas atualmente aceita qualquer tipo de dado. 
5 - Se o estacionamento estiver vazio e a fun√ß√£o sair_estacionamento for chamada, o c√≥digo retorna corretamente "Estacionamento vazio."
'''


class pilhaEstacionamento:
    def __init__(self):
        self.carros = []

    def entrar_estacionamento(self, carro):
        self.carros.append(carro)

    def sair_estacionamento(self):
        if not self.carros:
            return "estacionamento vazio"
        else:
            return f"o carro {self.carros.pop(0)} saiu do estacionamento."
            # certo seria: return f"o carro {self.carros.pop()} saiu do estacionamento.


'''
resp:
1 - A fun√ß√£o sair_estacionamento est√° implementada incorretamente, pois remove o primeiro 
carro adicionado √† pilha em vez do √∫ltimo.'''

'''
Considere um cen√°rio em que um cientista de dados precisa ordenar um conjunto de dados contendo as medi√ß√µes de temperatura ao longo de um ano para uma determinada cidade. Dada a necessidade de analisar as varia√ß√µes de temperatura ao longo do tempo, √© crucial utilizar um algoritmo de ordena√ß√£o eficiente.

Qual √© o grau de efici√™ncia Big O (nota√ß√£o assint√≥tica) do algoritmo de ordena√ß√£o (quicksort) aplicado no contexto das medi√ß√µes de temperatura?

1 - O(n) O algoritmo quicksort possui complexidade linear, sendo eficiente para conjuntos pequenos de dados.

2 - O(n^2) A efici√™ncia do quicksort degrada para O(n^2) no pior caso, tornando-se menos adequado para conjuntos extensos.

3 - O(log n) A complexidade logar√≠tmica n√£o √© aplic√°vel ao quicksort, que se destaca pela efici√™ncia em rela√ß√£o a abordagens de divis√£o e conquista.

4 - O(1) O algoritmo quicksort n√£o pode ser descrito como O(1), j√° que sua complexidade varia de acordo com o tamanho do conjunto de dados.

5 - O(n log n) A complexidade do quicksort √© O(n log n), garantindo efici√™ncia para conjuntos de dados moderadamente grandes.
'''


def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)


"resp:"
'''
O(n^2) A efici√™ncia do quicksort degrada para ùëÇ(ùëõ2)O(n2) no pior caso,
tornando-se menos adequado para conjuntos extensos.
'''


# O que ser√° impresso ap√≥s a execu√ß√£o do trecho de c√≥digo Python da imagem?
'''
a, b = 0, 1
while a <= 13:
    if (a % 2) == 1:
        print(a)
    a, b = b, a + b
'''
"resp: 1,1,3,5,13"

# O que o algoritmo da imagem realiza?
'''
1 Os fatores do n√∫mero inserido pelo usu√°rio
2 Uma sequ√™ncia de linhas conforme o n√∫mero inserido pelo usu√°rio
3 uma String contendo a multiplica√ß√£o do n√∫mero informado pelo usu√°rio por 10
4 A d√©cima pot√™ncia do n√∫mero inserido pelo usu√°rio
5 A tabuada do n√∫mero inserido pelo usu√°rio'''

num = int(input("informe o numero:"))

for i in range(1, 10):
    print(num, 'x', i, '=', (num * i))

"resp: 5 - A tabuada do n√∫mero inserido pelo usu√°rio"
